Your target DNS: http://1.1.1.1
Your wordlist file/list.txt: list.txt
Your Payload here/ payload.json: http://1.1.1.1
 Ketik Enter!
103.186.166.132
Masukin Sni/domain vps bug dengan https://: http://1.1.1.1
Payload Gagal
 Proxy host/Bug: http://1.1.1.1
dik:  http://1.1.1.1 target :
Jenis bug adalah:  <socket.socket [closed] fd=-1, family=2, type=1, proto=0>
 tls : nan
 Versi HTTP : ['HTTP/1.1']
koneksi port [381 192 398 205 441 125 106 194 111 162 241 329 187 273   3 328 145 257
 318 389  26 339 137 324 392 263 211  18 116 114 415 423 399 302 179 234
  83 311 105  47   6  15 346 397  23 429  48 357 360  73 286 291  25 334
 310 386 174  79 231 191 198 208 124 433 284 437 146 331   5 348 410 250
  53 395  87 321 400 203 406 363]
Koneksi : <Response [200]>
 hash:  -5538129966507392773
path:  ['', '']
None
 payloadnya : None
hasil sniffing bug:
{'__name__': 'scankuy', '__doc__': None, '__package__': '', '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x78d5bc8690>, '__spec__': ModuleSpec(name='scankuy', loader=<_frozen_importlib_external.SourceFileLoader object at 0x78d5bc8690>, origin='/storage/emulated/0/Download/mampus/scankuy.py'), '__file__': '/storage/emulated/0/Download/mampus/scankuy.py', '__cached__': '/storage/emulated/0/Download/mampus/__pycache__/scankuy.cpython-311.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'aiter': <built-in function aiter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'anext': <built-in function anext>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'BaseExceptionGroup': <class 'BaseExceptionGroup'>, 'Exception': <class 'Exception'>, 'GeneratorExit': <class 'GeneratorExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'SystemExit': <class 'SystemExit'>, 'ArithmeticError': <class 'ArithmeticError'>, 'AssertionError': <class 'AssertionError'>, 'AttributeError': <class 'AttributeError'>, 'BufferError': <class 'BufferError'>, 'EOFError': <class 'EOFError'>, 'ImportError': <class 'ImportError'>, 'LookupError': <class 'LookupError'>, 'MemoryError': <class 'MemoryError'>, 'NameError': <class 'NameError'>, 'OSError': <class 'OSError'>, 'ReferenceError': <class 'ReferenceError'>, 'RuntimeError': <class 'RuntimeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'SyntaxError': <class 'SyntaxError'>, 'SystemError': <class 'SystemError'>, 'TypeError': <class 'TypeError'>, 'ValueError': <class 'ValueError'>, 'Warning': <class 'Warning'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'BytesWarning': <class 'BytesWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'EncodingWarning': <class 'EncodingWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'UserWarning': <class 'UserWarning'>, 'BlockingIOError': <class 'BlockingIOError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionError': <class 'ConnectionError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'InterruptedError': <class 'InterruptedError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'IndentationError': <class 'IndentationError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'RecursionError': <class 'RecursionError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'UnicodeError': <class 'UnicodeError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'TabError': <class 'TabError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'ExceptionGroup': <class 'ExceptionGroup'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '__annotations__': {'prog': None}, 'codeop': <module 'codeop' from '/data/data/com.termux/files/usr/lib/python3.11/codeop.py'>, 'getpass': <module 'getpass' from '/data/data/com.termux/files/usr/lib/python3.11/getpass.py'>, 'gettext': <module 'gettext' from '/data/data/com.termux/files/usr/lib/python3.11/gettext.py'>, 'glob': <module 'glob' from '/data/data/com.termux/files/usr/lib/python3.11/glob.py'>, 'http': <module 'http' from '/data/data/com.termux/files/usr/lib/python3.11/http/__init__.py'>, 'os': <module 'os' (frozen)>, 'socket': <socket.socket [closed] fd=-1, family=2, type=1, proto=0>, 'socketserver': <module 'socketserver' from '/data/data/com.termux/files/usr/lib/python3.11/socketserver.py'>, 'threading': <module 'threading' from '/data/data/com.termux/files/usr/lib/python3.11/threading.py'>, 'time': <module 'time' (built-in)>, 'getopt': <function getopt at 0x78d4c04cc0>, 'pprint': <function pprint at 0x78d4c32c00>, 'decorator': <module 'decorator' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/decorator.py'>, 'np': <module 'numpy' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/numpy/__init__.py'>, 'request': <module 'requests' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/__init__.py'>, 'urllib3': <module 'urllib3' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/urllib3-1.26.13-py3.11.egg/urllib3/__init__.py'>, 'LOGIN_URL': '/accounts/login/', 'requests': <module 'django.contrib.sites.requests' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/django/contrib/sites/requests.py'>, 'urlparse': <function urlparse at 0x78d4ce54e0>, 'password': <function _passwordTkinter at 0x78d4ce72e0>, 'HTTP': <class 'scapy.layers.http.HTTP'>, 'writer': <class 'encodings.utf_8.StreamWriter'>, 'host': '103.186.166.132', 'server': ' NOT FOUND', 'reading': '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%  Copyright by Wenliang Du.                                       %%\n%%  This work is licensed under the Creative Commons                %%\n%%  Attribution-NonCommercial-ShareAlike 4.0 International License. %%\n%%  To view a copy of this license, visit                           %%\n%%  http://creativecommons.org/licenses/by-nc-sa/4.0/.              %%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\\newcommand{\\commonfolder}{../../common-files}\n\n\\input{\\commonfolder/header}\n\\input{\\commonfolder/copyright}\n\n\n\\lhead{\\bfseries SEED Labs -- Secret-Key Encryption Lab}\n\n\\begin{document}\n\n\n\\begin{center}\n{\\LARGE Secret-Key Encryption Lab}\n\\end{center}\n\n\\seedlabcopyright{2018}\n\n\\newcounter{task}\n\\setcounter{task}{1}\n\\newcommand{\\tasks} {\\bf {\\noindent (\\arabic{task})} \\addtocounter{task}{1} \\,}\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Overview}\n\nThe learning objective of this lab is for students to get familiar with\nthe concepts in the secret-key encryption and some common attacks\non encryption. From this lab, students will gain a first-hand experience\non encryption algorithms, encryption modes, paddings, and initial vector (IV).\nMoreover, students will be able to use tools and write programs to\nencrypt/decrypt messages.\n\nMany common mistakes have been made by developers in using\nthe encryption algorithms and modes. These mistakes\nweaken the strength of the encryption, and eventually\nlead to vulnerabilities. This lab exposes students to\nsome of these mistakes, and ask students to launch attacks\nto exploit those vulnerabilities. This lab covers the following topics:\n\n\\begin{itemize}[noitemsep]\n\\item Secret-key encryption\n\\item Substitution cipher and frequency analysis\n\\item Encryption modes, IV, and paddings\n\\item Common mistakes in using encryption algorithms\n\\item Programming using the crypto library\n\\end{itemize}\n\n\n\\paragraph{Readings.}\nDetailed coverage of the secret-key encryption can be found in the following:\n\n\\begin{itemize}\n\\item Chapter 21 of the SEED Book, \\seedbook\n\\end{itemize}\n\n\n\\paragraph{Lab Environment.} \\seedenvironmentB\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Lab Environment}\n\nIn this lab, we use a container to run an encryption oracle.\nThe container is only needed in Task \n6.3, so you do not need to start the container for other tasks. \n\n\n\\paragraph{Container Setup and Commands.}\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\input{\\commonfolder/container/setup}\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 1: Frequency Analysis}\n\nIt is well-known that monoalphabetic substitution cipher (also known as monoalphabetic cipher)\nis not secure, because it can be subjected to frequency analysis. In this lab, you are given\na cipher-text that is encrypted using a monoalphabetic cipher; namely,\neach letter in the original text is replaced by another letter,\nwhere the replacement does not vary (i.e., a letter is always replaced by the same letter\nduring the encryption). Your job is to find out the original text using\nfrequency analysis. It is known that the original text is an English article.\n\n\nIn the following, we describe how we encrypt the original article, and what\nsimplification we have made. Instructors can use the same\nmethod to encrypt an article of their choices, instead of asking\nstudents to use the ciphertext made by us.\n\n\\begin{itemize}\n\n\\item Step 1: let us generate the encryption key, i.e., the substitution table.\nWe will permute the alphabet from \\texttt{a}\nto \\texttt{z} using Python, and use the permuted alphabet as the key. See the following program.\n\n\\begin{lstlisting}\n#!/bin/env python3\n  \nimport random\ns = "abcdefghijklmnopqrstuvwxyz"\nlist = random.sample(s, len(s))\nkey = \'\'.join(list)\nprint(key)\n\\end{lstlisting}\n\n\\item Step 2: let us do some simplification to the original article.\nWe convert all upper cases to lower cases, and then\nremoved all the punctuations and numbers.  We do keep the spaces between words, so\nyou can still see the boundaries of the words in the ciphertext.\nIn real encryption using monoalphabetic cipher,\nspaces will be removed. We keep the spaces to simplify the task. We did this using the\nfollowing command:\n\n\\begin{lstlisting}\n$ tr [:upper:] [:lower:] < article.txt > lowercase.txt\n$ tr -cd \'[a-z][\\n][:space:]\' < lowercase.txt > plaintext.txt\n\\end{lstlisting}\n\n\n\\item Step 3: we use the \\texttt{tr} command to do the encryption.\nWe only encrypt letters, while leaving the space and return characters alone.\n\n\n\\begin{lstlisting}\n$ tr \'abcdefghijklmnopqrstuvwxyz\' \'sxtrwinqbedpvgkfmalhyuojzc\' \\\n      < plaintext.txt > ciphertext.txt\n\\end{lstlisting}\n\n\\end{itemize}\n\n\nWe have created a ciphertext using a different encryption key (not the one described above).\nIt is included in \\texttt{Labsetup.zip} file, which\ncan be downloaded from the lab\'s website. Your job is to use the frequency analysis\nto figure out the encryption key and the original plaintext.\n\nWe have also provided a Python program (\\texttt{freq.py}) inside \nthe \\path{Labsetup/Files} folder. It reads the \\texttt{ciphertext.txt} file,\nand produces the statistics for n-grams, including the single-letter frequencies, \nbigram frequencies (2-letter sequence), and trigram frequencies (3-letter sequence), etc.\n\n\n\\begin{lstlisting}\n$ ./freq.py \n-------------------------------------\n1-gram (top 20):\nn: 488\ny: 373\nv: 348\n...\n-------------------------------------\n2-gram (top 20):\nyt: 115\ntn: 89\nmu: 74\n...\n-------------------------------------\n3-gram (top 20):\nytn: 78\nvup: 30\nmur: 20\n...\n\\end{lstlisting}\n \n\n\n\\paragraph{Guidelines.} Using the frequency analysis, you can find\nout the plaintext for some of the characters quite easily. For those characters, you may want\nto change them back to its plaintext, as you may be able to get more clues.\nIt is better to use capital letters for plaintext, so for the same letter, we\nknow which is plaintext and which is ciphertext.\nYou can use the \\texttt{tr} command to do this. For example, in the following,\nwe replace letters \\texttt{a}, \\texttt{e}, and \\texttt{t} in\n\\texttt{in.txt} with letters \\texttt{X}, \\texttt{G}, \\texttt{E}, respectively;\nthe results are saved in \\texttt{out.txt}.\n\n\n\\begin{lstlisting}\n$ tr \'aet\' \'XGE\' < in.txt > out.txt\n\\end{lstlisting}\n\nThere are many online resources that you can use. We list some useful links in\nthe following:\n\n\\begin{itemize}\n\n\\item \\url{config.hc}: This Wikipedia/host page\nprovides frequencies for a typical English plaintext.\n\n\\item \\url{config.hc}: Bigram frequency.\n\n\\item  \\url{config.hc}: Trigram frequency.\n\\end{itemize}\n\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 2: Encryption using Different Ciphers and Modes}\n\nIn this task, we will play with various encryption algorithms\nand modes. You can use the following {\\tt openssl enc}\ncommand to encrypt/decrypt a file. To see the manuals, you can\ntype {\\tt man openssl} and {\\tt man enc}.\n\n\\begin{lstlisting}\n$ openssl enc -ciphertype -e  -in plain.txt -out cipher.bin \\\n              -K  00112233445566778889aabbccddeeff \\\n              -iv 0102030405060708\n\\end{lstlisting}\n\nPlease replace the {\\tt ciphertype} with a specific cipher type,\nsuch as {\\tt -aes-128-cbc}, {\\tt -bf-cbc}, {\\tt -aes-128-cfb},\netc. In this task, you should try at least 3 different ciphers.\nYou can find the meaning of the\ncommand-line options and all the supported cipher types\nby typing {\\tt "man enc"}.\nWe include some common options for the {\\tt openssl enc}\ncommand in the following:\n\n\\begin{lstlisting}\n  -in <file>     input file\n  -out <file>    output file\n  -e             encrypt\n  -d             decrypt\n  -K/-iv         key/iv in hex is the next argument\n  -[pP]          print the iv/key (then exit if -P)\n\\end{lstlisting}\n\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 3: Encryption Mode -- ECB vs. CBC}\n\nThe file {\\tt pic\\_original.bmp} is included in the\n\\texttt{Labsetup.zip} file, and it is a simple picture.\nWe would like to encrypt this picture, so people without the\nencryption keys cannot know what is in the picture. Please\nencrypt the file using the ECB (Electronic Code Book)\nand CBC (Cipher Block Chaining) modes, and then do the following:\n\n\\begin{enumerate}\n\\item Let us treat the encrypted picture as\na picture, and use a picture viewing software to display it. However,\nFor the {\\tt .bmp} file, the first 54 bytes contain the header information\nabout the picture, we have to set it correctly, so\nthe encrypted file can be treated as a legitimate {\\tt .bmp} file.\nWe will replace the header of the encrypted picture\nwith that of the original picture. We can use\nthe \\texttt{bless} hex editor tool (already installed\non our VM) to directly modify binary files. We can also use the\nfollowing commands to get the header from \\texttt{p1.bmp},\nthe data from \\texttt{p2.bmp} (from offset 55 to the end of the file),\nand then combine the header and data\ntogether into a new file.\n\n\\begin{lstlisting}\n$ head -c 54 p1.bmp  > header\n$ tail -c +55 p2.bmp > body\n$ cat header body > new.bmp\n\\end{lstlisting}\n\n\n\\item Display the encrypted picture using a picture\nviewing program (we have installed an image viewer program called\n\\texttt{eog} on our VM).\nCan you derive any useful information\nabout the original picture from the encrypted picture?\nPlease explain your observations.\n\n\\end{enumerate}\n\nSelect a  picture of your choice, repeat the experiment above,\nand report your observations.\n\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 4: Padding}\n\nFor block ciphers, when the size of a plaintext is not a multiple\nof the block size, padding may be required.\nThe PKCS\\#5 padding scheme is widely used by many block\nciphers (see Chapter 21.4 of the SEED book for details).\nWe will conduct the following experiments to\nunderstand how this type of padding works:\n\n\\begin{enumerate}\n\\item Use ECB, CBC, CFB, and OFB modes to encrypt a file (you can pick\nany cipher).  Please report which modes have paddings and which ones\ndo not. For those that do not need paddings, please explain why.\n\n\n\\item Let us create three files, which contain 5 bytes, 10 bytes, and 16 bytes, respectively.\nWe can use the following \\texttt{"echo -n"} command to create such files. The following example\ncreates a file \\texttt{f1.txt} with length 5 (without the \\texttt{-n} option, the length will\nbe 6, because a newline character will be added by \\texttt{echo}):\n\n\\begin{lstlisting}\n$ echo -n "12345" > f1.txt\n\\end{lstlisting}\n\nWe then use \\texttt{"openssl enc -aes-128-cbc -e"} to encrypt these three files using\n128-bit AES with CBC mode.  Please describe\nthe size of the encrypted files.\n\nWe would like to see what is added to the padding during the encryption. To achieve\nthis goal, we will decrypt these files using \\texttt{"openssl enc -aes-128-cbc -d"}.\nUnfortunately, decryption by default will automatically remove the padding, making it\nimpossible for us to see the padding. However, the command does have an option called\n\\texttt{"-nopad"}, which disables the padding, i.e., during the decryption, the command will not\nremove the padded data. Therefore, by looking at the decrypted\ndata, we can see what data are used in the padding.\nPlease use this technique to figure out what paddings are added to the three files.\n\nIt should be noted that padding data may not be printable, so you need to\nuse a hex tool to display the content. The following example shows\nhow to display a file in the hex format:\n\n\\begin{lstlisting}\n$ hexdump -C p1.txt\n00000000  31 32 33 34 35 36 37 38  39 49 4a 4b 4c 0a   |123456789IJKL.|\n$ xxd p1.txt\n00000000: 3132 3334 3536 3738 3949 4a4b 4c0a            123456789IJKL.\n\\end{lstlisting}\n\n\\end{enumerate}\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 5: Error Propagation -- Corrupted Cipher Text}\n\n\nTo understand the error propagation property of various encryption modes, we would like to\ndo the following exercise:\n\n\\begin{enumerate}\n\\item Create a text file that is at least 1000 bytes long.\n\\item Encrypt the file using the AES-128 cipher.\n\\item Unfortunately, a single bit of the 55th byte in the encrypted\n      file got corrupted. You can achieve this corruption using\n      the \\texttt{bless} hex editor.\n\\item Decrypt the corrupted ciphertext file using the correct key and IV.\n\\end{enumerate}\n\nPlease answer the following question:\nHow much information can you recover by decrypting the corrupted file, if the\nencryption mode is ECB, CBC, CFB, or OFB, respectively? Please answer this\nquestion before you conduct this task, and then find out whether your answer\nis correct or wrong after you finish this task.\nPlease provide justification.\n\n\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 6: Initial Vector (IV) and Common Mistakes}\n\nMost of the encryption modes require an initial vector (IV). Properties of an IV depend\non the cryptographic scheme used. If we are not careful in selecting IVs,\nthe data encrypted by us may not be secure at all, even though we are using\na secure encryption algorithm and mode. The objective of this task is to\nhelp students understand the problems if an IV is not selected properly.\nThe detailed guidelines for this task is provided in\nChapter 21.5 of the SEED book.\n\n\n% -------------------------------------------\n% SUBSECTION\n% -------------------------------------------\n\\subsection{Task 6.1. IV Experiment}\n\nA basic requirement for IV is \\textit{uniqueness},\nwhich means that no IV may be reused under the same key. To understand why,\nplease encrypt the same plaintext using (1) two different IVs, and (2)\nthe same IV. Please describe your observation, based on which, explain why\nIV needs to be unique.\n\n\n\n% -------------------------------------------\n% SUBSECTION\n% -------------------------------------------\n\\subsection{Task 6.2. Common Mistake: Use the Same IV}\n\nOne may argue that if the plaintext does not repeat, using\nthe same IV is safe. Let us look at the Output Feedback (OFB) mode.\nAssume that the attacker gets hold of a plaintext (\\texttt{P1})\nand a ciphertext (\\texttt{C1}) ,\ncan he/she decrypt other encrypted messages if the IV is always the same?\nYou are given the following information, please try to figure out\nthe actual content of \\texttt{P2} based on \\texttt{C2}, \\texttt{P1},\nand \\texttt{C1}.\n\n\n\\begin{lstlisting}\nPlaintext  (P1): This is a known message!\nCiphertext (C1): a469b1c502c1cab966965e50425438e1bb1b5f9037a4c159\n\nPlaintext  (P2): (unknown to you)\nCiphertext (C2): bf73bcd3509299d566c35b5d450337e1bb175f903fafc159\n\\end{lstlisting}\n\nIf we replace OFB in this experiment with\nCFB (Cipher Feedback), how much of \\texttt{P2} can be revealed? You\nonly need to answer the question; there is no need to demonstrate that.\n\nThe attack used in this experiment is called the \\textit{known-plaintext\nattack}, which is an attack model for cryptanalysis where the\nattacker has access to both the plaintext and its\nencrypted version (ciphertext). If this can lead to\nthe revealing of further secret information, the encryption scheme is\nnot considered as secure.\n\n\n\\paragraph{Sample Code.} We provide a sample program called \\texttt{sample\\_code.py},\nwhich can be found inside the \\path{Labsetup/Files} folder. It shows you \nhow to XOR strings (ascii strings and hex strings). The code\nis shown in the following:\n\n\\begin{lstlisting}\n#!/usr/bin/python3\n\n# XOR two bytearrays\ndef xor(first, second):\n   return bytearray(x^y for x,y in zip(first, second))\n\nMSG   = "A message"\nHEX_1 = "aabbccddeeff1122334455"\nHEX_2 = "1122334455778800aabbdd"\n\n# Convert ascii/hex string to bytearray\nD1 = bytes(MSG, \'utf-8\')\nD2 = bytearray.fromhex(HEX_1)\nD3 = bytearray.fromhex(HEX_2)\n\nr1 = xor(D1, D2)\nr2 = xor(D2, D3)\nr3 = xor(D2, D2)\nprint(r1.hex())\nprint(r2.hex())\nprint(r3.hex())\n\\end{lstlisting}\n\n \n\n% -------------------------------------------\n% SUBSECTION\n% -------------------------------------------\n\\subsection{Task 6.3. Common Mistake: Use a Predictable IV}\n\nFrom the previous tasks, we now know that IVs cannot\nrepeat. Another important requirement on IV is that\nIVs need to be unpredictable for many schemes, i.e., IVs need to\nbe randomly generated. In this task, we will see what is going to happen if\nIVs are predictable.\n\nAssume that Bob just sent out an encrypted message, and Eve knows that its\ncontent is either \\texttt{Yes} or \\texttt{No};\nEve can see the ciphertext and the IV used\nto encrypt the message, but since the encryption algorithm AES is quite\nstrong, Eve has no idea what the actual content is. However, since Bob uses\npredictable IVs, Eve knows exactly what IV Bob is going to use next.\n% The following summarizes what Bob and Eve know:\n\n% \\begin{lstlisting}\n% Encryption method: 128-bit AES with CBC mode.\n\n% Key (in hex):    00112233445566778899aabbccddeeff (known only to Bob)\n% Ciphertext (C1): bef65565572ccee2a9f9553154ed9498 (known to both)\n% IV used on P1 (known to both)\n%      (in ascii): 1234567890123456\n%      (in hex)  : 31323334353637383930313233343536\n% Next IV (known to both)\n%      (in ascii): 1234567890123457\n%      (in hex)  : 31323334353637383930313233343537\n% \\end{lstlisting}\n\n\nA good cipher should not only tolerate the known-plaintext attack described\npreviously, it should also tolerate the \\textit{chosen-plaintext attack},\nwhich is an attack model for cryptanalysis where the attacker can obtain the\nciphertext for an arbitrary plaintext. Since AES is a strong cipher that\ncan tolerate the chosen-plaintext attack, Bob does not mind encrypting any\nplaintext given by Eve; he does use a different IV for each plaintext,\nbut unfortunately, the IVs he generates are not random, and they can\nalways be predictable.\n\nYour job is to construct a message and ask Bob to encrypt it\nand give you the ciphertext.\nYour objective is to use this opportunity to figure out\nwhether the actual content of Bob\'s secret message is \\texttt{Yes} or \\texttt{No}.\nFor this task, your are given an encryption oracle\nwhich simulates Bob and encrypts message with 128-bit AES with CBC mode.\nYou can get access to the oracle by running the following command:\n\n\\begin{lstlisting}\n$ nc 10.9.0.80 3000\nBob\'s secret message is either "Yes" or "No", without quotations.\nBob\'s ciphertex: 54601f27c6605da997865f62765117ce\nThe IV used    : d27d724f59a84d9b61c0f2883efa7bbc\n\nNext IV        : d34c739f59a84d9b61c0f2883efa7bbc\nYour plaintext : 11223344aabbccdd\nYour ciphertext: 05291d3169b2921f08fe34449ddc3611\n\nNext IV        : cd9f1ee659a84d9b61c0f2883efa7bbc\nYour plaintext : <your input>\n\\end{lstlisting}\n\nAfter showing you the next IV, \nthe oracle will ask you to input a plaintext message (as a hex string).\nThe oracle will encrypt the message with the next IV, \nand outputs the new ciphertext.\nYou can try different plaintexts, but keep in mind that every time, the \nIV will change, but it is predictable. To simply your job, we let the \noracle print out the next IV. To exit from the interaction, press \\text{Ctrl+C}.\n\n\n% -------------------------------------------\n% SUBSECTION\n% -------------------------------------------\n\\subsection{Additional Readings}\n\nThere are more advanced cryptanalysis on IV that is beyond the scope of this lab. Students\ncan read the article posted in this URL: \\url{https://defuse.ca/cbcmodeiv.htm}.\nBecause the requirements on IV really depend on cryptographic schemes, it is hard to\nremember what properties should be maintained when we select an IV.\nHowever, we will be safe if we always use a new IV for each encryption, and the\nnew IV needs to be generated using a good pseudo random number\ngenerator, so it is unpredictable by adversaries.\nSee another SEED lab (Random Number Generation Lab) for\ndetails on how to generate cryptographically strong pseudo random numbers.\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Task 7: Programming using the Crypto Library}\n\nThis task is mainly designed for students in Computer Science/Engineering\nor related fields, where programming is required. Students should\ncheck with their professors to see whether this task is required\nfor their courses or not.\n\n\nIn this task, you are given a plaintext and a ciphertext, and\nyour job is to find the key that is used for the encryption.\nYou do know the following facts:\n\n\\begin{itemize}\n\\item The {\\tt aes-128-cbc} cipher is used for the encryption.\n\\item The key used to encrypt this plaintext is an English\nword shorter than 16 characters; the word can be found from a typical\nEnglish dictionary.  Since the word has less than 16 characters (i.e. 128\nbits), pound signs (\\texttt{\\#}: hexadecimal value is \\texttt{0x23})\nare appended to the end of the word to form a key of 128 bits.\n\\end{itemize}\n\n\nYour goal is to write a program to\nfind out the encryption key. You can download a English word list\nfrom the Internet.  We have also included one in\nthe \\texttt{Labsetup.zip} file.\nThe plaintext, ciphertext, and IV are listed in the following:\n\n\n\\begin{lstlisting}\nPlaintext (total 21 characters): This is a top secret.\nCiphertext (in hex format): 764aa26b55a4da654df6b19e4bce00f4\n                            ed05e09346fb0e762583cb7da2ac93a2\nIV (in hex format):         aabbccddeeff00998877665544332211\n\\end{lstlisting}\n\n\n\nYou need to pay attention to the following issues:\n\n\\begin{itemize}\n\\item If you choose to store the plaintext message in\na file, and feed the file to your program, you need to check\nwhether the file length is 21. If you type the message in a text editor,\nyou need to be aware that some editors may add a special\ncharacter to the end of the file. The easiest way to store the message\nin a file is to use the following\ncommand (the \\texttt{-n} flag\ntells \\texttt{echo} not to  add a trailing newline):\n\n\n\\begin{lstlisting}\n$ echo -n "This is a top secret." > file\n\\end{lstlisting}\n\n\\item In this task, you are supposed to write your own program\nto invoke the crypto library. No credit will be given\nif you simply use the {\\tt openssl} commands to do this task.\nSample code can be found from the following URL:\n\\begin{lstlisting}\n https://www.openssl.org/docs/man1.1.1/man3/EVP_CipherInit.html\n\\end{lstlisting}\n\n\n\\item When you compile your code using  \\texttt{gcc},\ndo not forget to include the \\texttt{-lcrypto} flag, because your code\nneeds the \\texttt{crypto} library. See the following example:\n\n\\begin{lstlisting}\n$ gcc -o myenc myenc.c -lcrypto\n\\end{lstlisting}\n\n\\end{itemize}\n\n\\paragraph{Note to instructors.}\nWe encourage instructors to generate their own plaintext and ciphertext using\na different key; this way students will not be able to get the answer from\nanother place or from previous courses. Instructors can use the\nfollowing commands to achieve this goal (please replace the word \\texttt{example}\nwith another secret word, and add the correct number of \\# signs to make\nthe length of the string to be 16):\n\n\\begin{lstlisting}\n$ echo -n "This is a top secret." > plaintext.txt\n$ echo -n "example#########" > key\n$ xxd -p key\n6578616d706c65232323232323232323\n$ openssl enc -aes-128-cbc -e -in plaintext.txt -out ciphertext.bin \\\n      -K  6578616d706c65232323232323232323  \\\n      -iv 010203040506070809000a0b0c0d0e0f  \\\n$ xxd -p ciphertext.bin\ne5accdb667e8e569b1b34f423508c15422631198454e104ceb658f5918800c22\n\\end{lstlisting}\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Submission}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\input{\\commonfolder/submission}\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n% *******************************************\n% SECTION\n% *******************************************\n\\section{Acknowledgment}\n\nWe would like to acknowledge the contribution made by the following people and organizations:\n\n\\begin{itemize}\n\\item Jiamin Shen developed the following: the code running inside the container, \n      and the container version of the task on predictable IV.\n\n\\item The US National Science Foundation provided the funding for the SEED project from 2002 \n      to 2020.\n\n\\item Syracuse University provided the resources for the SEED project from 2001 onwards.\n\\end{itemize}\n \n\n\n\n\n\n\n\\end{document}\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\n\n% This part is no longer used\n\\subsection{Task 6: Encrypting UDP Communication}\n\n\\mynote{\n{\\bf For Instructor:} The goal of Task 6 and Task 7 is to get students to use encryption\nprogrammatically. It is not very necessary to do both tasks. Instructors\ncan choose either one of them (or both). If the encryption topic is covered\nin the context of a Network Security class, Task 6 is a better choice,\nbecause it uses encryption to secure a communication channel.\n}\n\n\\noindent\nSo far, we have learned how to use the existing tools provided by\n\\openssl to encrypt and decrypt messages. We would like to build our own\ntools. Therefore,  the objective of this task\nis to learn how to use \\openssl\'s  crypto library to encrypt/decrypt\nmessages in programs.\n\n\nOpenSSL provides an API called EVP, which\nis a high-level interface to cryptographic functions.\nAlthough OpenSSL also has direct interfaces for each individual\nencryption algorithm, the EVP library provides\na common interface for various encryption algorithms.\nTo ask EVP to use a specific algorithm, we simply need to\npass our choice to the EVP interface.\nA sample code is given in\n\\url{https://www.openssl.org/docs/man1.1.1/man3/EVP_CipherInit.html}\nPlease get familiar with this program.\n\n\nIn this task, we will build a client/server program, which use the UDP protocol and\nthe communication is encrypted. The client and server side of the program should\nsatisfy the following requirements:\n\n\\begin{itemize}\n  \\item The data sent between the client and server should be encrypted using\n    an encryption algorithm and mode of your choice (e.g. \\texttt{aes-128-cbc}).\n\n  \\item The client program runs in a loop, and keeps asking the user to type a message.\n    Once the user hits the return, the message will be sent to the server using UDP.\n    Upon receiving the UDP packet, the server simply prints out the decrypted message.\n\n  \\item The client and server need a common secret key to encrypt the communication.\n    Obviously, they cannot send the key to each other in plaintext. In practice, they\n    need to run a key-exchange protocol to get the key. We will cover that protocol\n    after we have learned the public key encryption. In this task, we assume that the client\n    and server has already obtained a secret key between them, so we will just\n    type in the key as an argument when we run the client and server programs.\n    {\\bf Note:} you cannot hardcode the key in your program, because it is a very bad habit.\n\n  \\item The Initial Vector (IV) needs to be randomly generated by the client,\n    and should be sent to the server in plaintext. You can put the IV at the beginning of the\n    UDP data. In your report, please answer why the client cannot reuse the IV throughout its\n    execution (hint: try to fix your IV in your client program, then type the same message, and\n    use Wireshark to see what you can infer about the encrypted data).\n\\end{itemize}\n\n', 'genericpath': None, 'adapi': 'output', 'adapt': 'http://1.1.1.1', 'dist': <Thread(Thread-3, initial)>, 'filename': 'list.txt', 'fills': ['HTTP/1.1', 'HTTP/1.2', 'HTTP/1.3', 'HTTP/2.0', 'HTTP/0', 'HTTP/2.1', 'HTTP/2.2'], 'payloads': 'http://1.1.1.1', 'fils': ['h', 't', 't', 'p', ':', '/', '/', '1', '.', '1', '.', '1', '.', '1'], 'fields': ['list.txt'], 'field': ['%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '%%', 'Copyright', 'by', 'Wenliang', 'Du.', '%%', '%%', 'This', 'work', 'is', 'licensed', 'under', 'the', 'Creative', 'Commons', '%%', '%%', 'Attribution-NonCommercial-ShareAlike', '4.0', 'International', 'License.', '%%', '%%', 'To', 'view', 'a', 'copy', 'of', 'this', 'license,', 'visit', '%%', '%%', 'http://creativecommons.org/licenses/by-nc-sa/4.0/.', '%%', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '\\newcommand{\\commonfolder}{../../common-files}', '\\input{\\commonfolder/header}', '\\input{\\commonfolder/copyright}', '\\lhead{\\bfseries', 'SEED', 'Labs', '--', 'Secret-Key', 'Encryption', 'Lab}', '\\begin{document}', '\\begin{center}', '{\\LARGE', 'Secret-Key', 'Encryption', 'Lab}', '\\end{center}', '\\seedlabcopyright{2018}', '\\newcounter{task}', '\\setcounter{task}{1}', '\\newcommand{\\tasks}', '{\\bf', '{\\noindent', '(\\arabic{task})}', '\\addtocounter{task}{1}', '\\,}', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Overview}', 'The', 'learning', 'objective', 'of', 'this', 'lab', 'is', 'for', 'students', 'to', 'get', 'familiar', 'with', 'the', 'concepts', 'in', 'the', 'secret-key', 'encryption', 'and', 'some', 'common', 'attacks', 'on', 'encryption.', 'From', 'this', 'lab,', 'students', 'will', 'gain', 'a', 'first-hand', 'experience', 'on', 'encryption', 'algorithms,', 'encryption', 'modes,', 'paddings,', 'and', 'initial', 'vector', '(IV).', 'Moreover,', 'students', 'will', 'be', 'able', 'to', 'use', 'tools', 'and', 'write', 'programs', 'to', 'encrypt/decrypt', 'messages.', 'Many', 'common', 'mistakes', 'have', 'been', 'made', 'by', 'developers', 'in', 'using', 'the', 'encryption', 'algorithms', 'and', 'modes.', 'These', 'mistakes', 'weaken', 'the', 'strength', 'of', 'the', 'encryption,', 'and', 'eventually', 'lead', 'to', 'vulnerabilities.', 'This', 'lab', 'exposes', 'students', 'to', 'some', 'of', 'these', 'mistakes,', 'and', 'ask', 'students', 'to', 'launch', 'attacks', 'to', 'exploit', 'those', 'vulnerabilities.', 'This', 'lab', 'covers', 'the', 'following', 'topics:', '\\begin{itemize}[noitemsep]', '\\item', 'Secret-key', 'encryption', '\\item', 'Substitution', 'cipher', 'and', 'frequency', 'analysis', '\\item', 'Encryption', 'modes,', 'IV,', 'and', 'paddings', '\\item', 'Common', 'mistakes', 'in', 'using', 'encryption', 'algorithms', '\\item', 'Programming', 'using', 'the', 'crypto', 'library', '\\end{itemize}', '\\paragraph{Readings.}', 'Detailed', 'coverage', 'of', 'the', 'secret-key', 'encryption', 'can', 'be', 'found', 'in', 'the', 'following:', '\\begin{itemize}', '\\item', 'Chapter', '21', 'of', 'the', 'SEED', 'Book,', '\\seedbook', '\\end{itemize}', '\\paragraph{Lab', 'Environment.}', '\\seedenvironmentB', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Lab', 'Environment}', 'In', 'this', 'lab,', 'we', 'use', 'a', 'container', 'to', 'run', 'an', 'encryption', 'oracle.', 'The', 'container', 'is', 'only', 'needed', 'in', 'Task', '6.3,', 'so', 'you', 'do', 'not', 'need', 'to', 'start', 'the', 'container', 'for', 'other', 'tasks.', '\\paragraph{Container', 'Setup', 'and', 'Commands.}', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '\\input{\\commonfolder/container/setup}', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '1:', 'Frequency', 'Analysis}', 'It', 'is', 'well-known', 'that', 'monoalphabetic', 'substitution', 'cipher', '(also', 'known', 'as', 'monoalphabetic', 'cipher)', 'is', 'not', 'secure,', 'because', 'it', 'can', 'be', 'subjected', 'to', 'frequency', 'analysis.', 'In', 'this', 'lab,', 'you', 'are', 'given', 'a', 'cipher-text', 'that', 'is', 'encrypted', 'using', 'a', 'monoalphabetic', 'cipher;', 'namely,', 'each', 'letter', 'in', 'the', 'original', 'text', 'is', 'replaced', 'by', 'another', 'letter,', 'where', 'the', 'replacement', 'does', 'not', 'vary', '(i.e.,', 'a', 'letter', 'is', 'always', 'replaced', 'by', 'the', 'same', 'letter', 'during', 'the', 'encryption).', 'Your', 'job', 'is', 'to', 'find', 'out', 'the', 'original', 'text', 'using', 'frequency', 'analysis.', 'It', 'is', 'known', 'that', 'the', 'original', 'text', 'is', 'an', 'English', 'article.', 'In', 'the', 'following,', 'we', 'describe', 'how', 'we', 'encrypt', 'the', 'original', 'article,', 'and', 'what', 'simplification', 'we', 'have', 'made.', 'Instructors', 'can', 'use', 'the', 'same', 'method', 'to', 'encrypt', 'an', 'article', 'of', 'their', 'choices,', 'instead', 'of', 'asking', 'students', 'to', 'use', 'the', 'ciphertext', 'made', 'by', 'us.', '\\begin{itemize}', '\\item', 'Step', '1:', 'let', 'us', 'generate', 'the', 'encryption', 'key,', 'i.e.,', 'the', 'substitution', 'table.', 'We', 'will', 'permute', 'the', 'alphabet', 'from', '\\texttt{a}', 'to', '\\texttt{z}', 'using', 'Python,', 'and', 'use', 'the', 'permuted', 'alphabet', 'as', 'the', 'key.', 'See', 'the', 'following', 'program.', '\\begin{lstlisting}', '#!/bin/env', 'python3', 'import', 'random', 's', '=', '"abcdefghijklmnopqrstuvwxyz"', 'list', '=', 'random.sample(s,', 'len(s))', 'key', '=', "''.join(list)", 'print(key)', '\\end{lstlisting}', '\\item', 'Step', '2:', 'let', 'us', 'do', 'some', 'simplification', 'to', 'the', 'original', 'article.', 'We', 'convert', 'all', 'upper', 'cases', 'to', 'lower', 'cases,', 'and', 'then', 'removed', 'all', 'the', 'punctuations', 'and', 'numbers.', 'We', 'do', 'keep', 'the', 'spaces', 'between', 'words,', 'so', 'you', 'can', 'still', 'see', 'the', 'boundaries', 'of', 'the', 'words', 'in', 'the', 'ciphertext.', 'In', 'real', 'encryption', 'using', 'monoalphabetic', 'cipher,', 'spaces', 'will', 'be', 'removed.', 'We', 'keep', 'the', 'spaces', 'to', 'simplify', 'the', 'task.', 'We', 'did', 'this', 'using', 'the', 'following', 'command:', '\\begin{lstlisting}', '$', 'tr', '[:upper:]', '[:lower:]', '<', 'article.txt', '>', 'lowercase.txt', '$', 'tr', '-cd', "'[a-z][\\n][:space:]'", '<', 'lowercase.txt', '>', 'plaintext.txt', '\\end{lstlisting}', '\\item', 'Step', '3:', 'we', 'use', 'the', '\\texttt{tr}', 'command', 'to', 'do', 'the', 'encryption.', 'We', 'only', 'encrypt', 'letters,', 'while', 'leaving', 'the', 'space', 'and', 'return', 'characters', 'alone.', '\\begin{lstlisting}', '$', 'tr', "'abcdefghijklmnopqrstuvwxyz'", "'sxtrwinqbedpvgkfmalhyuojzc'", '\\', '<', 'plaintext.txt', '>', 'ciphertext.txt', '\\end{lstlisting}', '\\end{itemize}', 'We', 'have', 'created', 'a', 'ciphertext', 'using', 'a', 'different', 'encryption', 'key', '(not', 'the', 'one', 'described', 'above).', 'It', 'is', 'included', 'in', '\\texttt{Labsetup.zip}', 'file,', 'which', 'can', 'be', 'downloaded', 'from', 'the', "lab's", 'website.', 'Your', 'job', 'is', 'to', 'use', 'the', 'frequency', 'analysis', 'to', 'figure', 'out', 'the', 'encryption', 'key', 'and', 'the', 'original', 'plaintext.', 'We', 'have', 'also', 'provided', 'a', 'Python', 'program', '(\\texttt{freq.py})', 'inside', 'the', '\\path{Labsetup/Files}', 'folder.', 'It', 'reads', 'the', '\\texttt{ciphertext.txt}', 'file,', 'and', 'produces', 'the', 'statistics', 'for', 'n-grams,', 'including', 'the', 'single-letter', 'frequencies,', 'bigram', 'frequencies', '(2-letter', 'sequence),', 'and', 'trigram', 'frequencies', '(3-letter', 'sequence),', 'etc.', '\\begin{lstlisting}', '$', './freq.py', '-------------------------------------', '1-gram', '(top', '20):', 'n:', '488', 'y:', '373', 'v:', '348', '...', '-------------------------------------', '2-gram', '(top', '20):', 'yt:', '115', 'tn:', '89', 'mu:', '74', '...', '-------------------------------------', '3-gram', '(top', '20):', 'ytn:', '78', 'vup:', '30', 'mur:', '20', '...', '\\end{lstlisting}', '\\paragraph{Guidelines.}', 'Using', 'the', 'frequency', 'analysis,', 'you', 'can', 'find', 'out', 'the', 'plaintext', 'for', 'some', 'of', 'the', 'characters', 'quite', 'easily.', 'For', 'those', 'characters,', 'you', 'may', 'want', 'to', 'change', 'them', 'back', 'to', 'its', 'plaintext,', 'as', 'you', 'may', 'be', 'able', 'to', 'get', 'more', 'clues.', 'It', 'is', 'better', 'to', 'use', 'capital', 'letters', 'for', 'plaintext,', 'so', 'for', 'the', 'same', 'letter,', 'we', 'know', 'which', 'is', 'plaintext', 'and', 'which', 'is', 'ciphertext.', 'You', 'can', 'use', 'the', '\\texttt{tr}', 'command', 'to', 'do', 'this.', 'For', 'example,', 'in', 'the', 'following,', 'we', 'replace', 'letters', '\\texttt{a},', '\\texttt{e},', 'and', '\\texttt{t}', 'in', '\\texttt{in.txt}', 'with', 'letters', '\\texttt{X},', '\\texttt{G},', '\\texttt{E},', 'respectively;', 'the', 'results', 'are', 'saved', 'in', '\\texttt{out.txt}.', '\\begin{lstlisting}', '$', 'tr', "'aet'", "'XGE'", '<', 'in.txt', '>', 'out.txt', '\\end{lstlisting}', 'There', 'are', 'many', 'online', 'resources', 'that', 'you', 'can', 'use.', 'We', 'list', 'some', 'useful', 'links', 'in', 'the', 'following:', '\\begin{itemize}', '\\item', '\\url{config.hc}:', 'This', 'Wikipedia/host', 'page', 'provides', 'frequencies', 'for', 'a', 'typical', 'English', 'plaintext.', '\\item', '\\url{config.hc}:', 'Bigram', 'frequency.', '\\item', '\\url{config.hc}:', 'Trigram', 'frequency.', '\\end{itemize}', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '2:', 'Encryption', 'using', 'Different', 'Ciphers', 'and', 'Modes}', 'In', 'this', 'task,', 'we', 'will', 'play', 'with', 'various', 'encryption', 'algorithms', 'and', 'modes.', 'You', 'can', 'use', 'the', 'following', '{\\tt', 'openssl', 'enc}', 'command', 'to', 'encrypt/decrypt', 'a', 'file.', 'To', 'see', 'the', 'manuals,', 'you', 'can', 'type', '{\\tt', 'man', 'openssl}', 'and', '{\\tt', 'man', 'enc}.', '\\begin{lstlisting}', '$', 'openssl', 'enc', '-ciphertype', '-e', '-in', 'plain.txt', '-out', 'cipher.bin', '\\', '-K', '00112233445566778889aabbccddeeff', '\\', '-iv', '0102030405060708', '\\end{lstlisting}', 'Please', 'replace', 'the', '{\\tt', 'ciphertype}', 'with', 'a', 'specific', 'cipher', 'type,', 'such', 'as', '{\\tt', '-aes-128-cbc},', '{\\tt', '-bf-cbc},', '{\\tt', '-aes-128-cfb},', 'etc.', 'In', 'this', 'task,', 'you', 'should', 'try', 'at', 'least', '3', 'different', 'ciphers.', 'You', 'can', 'find', 'the', 'meaning', 'of', 'the', 'command-line', 'options', 'and', 'all', 'the', 'supported', 'cipher', 'types', 'by', 'typing', '{\\tt', '"man', 'enc"}.', 'We', 'include', 'some', 'common', 'options', 'for', 'the', '{\\tt', 'openssl', 'enc}', 'command', 'in', 'the', 'following:', '\\begin{lstlisting}', '-in', '<file>', 'input', 'file', '-out', '<file>', 'output', 'file', '-e', 'encrypt', '-d', 'decrypt', '-K/-iv', 'key/iv', 'in', 'hex', 'is', 'the', 'next', 'argument', '-[pP]', 'print', 'the', 'iv/key', '(then', 'exit', 'if', '-P)', '\\end{lstlisting}', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '3:', 'Encryption', 'Mode', '--', 'ECB', 'vs.', 'CBC}', 'The', 'file', '{\\tt', 'pic\\_original.bmp}', 'is', 'included', 'in', 'the', '\\texttt{Labsetup.zip}', 'file,', 'and', 'it', 'is', 'a', 'simple', 'picture.', 'We', 'would', 'like', 'to', 'encrypt', 'this', 'picture,', 'so', 'people', 'without', 'the', 'encryption', 'keys', 'cannot', 'know', 'what', 'is', 'in', 'the', 'picture.', 'Please', 'encrypt', 'the', 'file', 'using', 'the', 'ECB', '(Electronic', 'Code', 'Book)', 'and', 'CBC', '(Cipher', 'Block', 'Chaining)', 'modes,', 'and', 'then', 'do', 'the', 'following:', '\\begin{enumerate}', '\\item', 'Let', 'us', 'treat', 'the', 'encrypted', 'picture', 'as', 'a', 'picture,', 'and', 'use', 'a', 'picture', 'viewing', 'software', 'to', 'display', 'it.', 'However,', 'For', 'the', '{\\tt', '.bmp}', 'file,', 'the', 'first', '54', 'bytes', 'contain', 'the', 'header', 'information', 'about', 'the', 'picture,', 'we', 'have', 'to', 'set', 'it', 'correctly,', 'so', 'the', 'encrypted', 'file', 'can', 'be', 'treated', 'as', 'a', 'legitimate', '{\\tt', '.bmp}', 'file.', 'We', 'will', 'replace', 'the', 'header', 'of', 'the', 'encrypted', 'picture', 'with', 'that', 'of', 'the', 'original', 'picture.', 'We', 'can', 'use', 'the', '\\texttt{bless}', 'hex', 'editor', 'tool', '(already', 'installed', 'on', 'our', 'VM)', 'to', 'directly', 'modify', 'binary', 'files.', 'We', 'can', 'also', 'use', 'the', 'following', 'commands', 'to', 'get', 'the', 'header', 'from', '\\texttt{p1.bmp},', 'the', 'data', 'from', '\\texttt{p2.bmp}', '(from', 'offset', '55', 'to', 'the', 'end', 'of', 'the', 'file),', 'and', 'then', 'combine', 'the', 'header', 'and', 'data', 'together', 'into', 'a', 'new', 'file.', '\\begin{lstlisting}', '$', 'head', '-c', '54', 'p1.bmp', '>', 'header', '$', 'tail', '-c', '+55', 'p2.bmp', '>', 'body', '$', 'cat', 'header', 'body', '>', 'new.bmp', '\\end{lstlisting}', '\\item', 'Display', 'the', 'encrypted', 'picture', 'using', 'a', 'picture', 'viewing', 'program', '(we', 'have', 'installed', 'an', 'image', 'viewer', 'program', 'called', '\\texttt{eog}', 'on', 'our', 'VM).', 'Can', 'you', 'derive', 'any', 'useful', 'information', 'about', 'the', 'original', 'picture', 'from', 'the', 'encrypted', 'picture?', 'Please', 'explain', 'your', 'observations.', '\\end{enumerate}', 'Select', 'a', 'picture', 'of', 'your', 'choice,', 'repeat', 'the', 'experiment', 'above,', 'and', 'report', 'your', 'observations.', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '4:', 'Padding}', 'For', 'block', 'ciphers,', 'when', 'the', 'size', 'of', 'a', 'plaintext', 'is', 'not', 'a', 'multiple', 'of', 'the', 'block', 'size,', 'padding', 'may', 'be', 'required.', 'The', 'PKCS\\#5', 'padding', 'scheme', 'is', 'widely', 'used', 'by', 'many', 'block', 'ciphers', '(see', 'Chapter', '21.4', 'of', 'the', 'SEED', 'book', 'for', 'details).', 'We', 'will', 'conduct', 'the', 'following', 'experiments', 'to', 'understand', 'how', 'this', 'type', 'of', 'padding', 'works:', '\\begin{enumerate}', '\\item', 'Use', 'ECB,', 'CBC,', 'CFB,', 'and', 'OFB', 'modes', 'to', 'encrypt', 'a', 'file', '(you', 'can', 'pick', 'any', 'cipher).', 'Please', 'report', 'which', 'modes', 'have', 'paddings', 'and', 'which', 'ones', 'do', 'not.', 'For', 'those', 'that', 'do', 'not', 'need', 'paddings,', 'please', 'explain', 'why.', '\\item', 'Let', 'us', 'create', 'three', 'files,', 'which', 'contain', '5', 'bytes,', '10', 'bytes,', 'and', '16', 'bytes,', 'respectively.', 'We', 'can', 'use', 'the', 'following', '\\texttt{"echo', '-n"}', 'command', 'to', 'create', 'such', 'files.', 'The', 'following', 'example', 'creates', 'a', 'file', '\\texttt{f1.txt}', 'with', 'length', '5', '(without', 'the', '\\texttt{-n}', 'option,', 'the', 'length', 'will', 'be', '6,', 'because', 'a', 'newline', 'character', 'will', 'be', 'added', 'by', '\\texttt{echo}):', '\\begin{lstlisting}', '$', 'echo', '-n', '"12345"', '>', 'f1.txt', '\\end{lstlisting}', 'We', 'then', 'use', '\\texttt{"openssl', 'enc', '-aes-128-cbc', '-e"}', 'to', 'encrypt', 'these', 'three', 'files', 'using', '128-bit', 'AES', 'with', 'CBC', 'mode.', 'Please', 'describe', 'the', 'size', 'of', 'the', 'encrypted', 'files.', 'We', 'would', 'like', 'to', 'see', 'what', 'is', 'added', 'to', 'the', 'padding', 'during', 'the', 'encryption.', 'To', 'achieve', 'this', 'goal,', 'we', 'will', 'decrypt', 'these', 'files', 'using', '\\texttt{"openssl', 'enc', '-aes-128-cbc', '-d"}.', 'Unfortunately,', 'decryption', 'by', 'default', 'will', 'automatically', 'remove', 'the', 'padding,', 'making', 'it', 'impossible', 'for', 'us', 'to', 'see', 'the', 'padding.', 'However,', 'the', 'command', 'does', 'have', 'an', 'option', 'called', '\\texttt{"-nopad"},', 'which', 'disables', 'the', 'padding,', 'i.e.,', 'during', 'the', 'decryption,', 'the', 'command', 'will', 'not', 'remove', 'the', 'padded', 'data.', 'Therefore,', 'by', 'looking', 'at', 'the', 'decrypted', 'data,', 'we', 'can', 'see', 'what', 'data', 'are', 'used', 'in', 'the', 'padding.', 'Please', 'use', 'this', 'technique', 'to', 'figure', 'out', 'what', 'paddings', 'are', 'added', 'to', 'the', 'three', 'files.', 'It', 'should', 'be', 'noted', 'that', 'padding', 'data', 'may', 'not', 'be', 'printable,', 'so', 'you', 'need', 'to', 'use', 'a', 'hex', 'tool', 'to', 'display', 'the', 'content.', 'The', 'following', 'example', 'shows', 'how', 'to', 'display', 'a', 'file', 'in', 'the', 'hex', 'format:', '\\begin{lstlisting}', '$', 'hexdump', '-C', 'p1.txt', '00000000', '31', '32', '33', '34', '35', '36', '37', '38', '39', '49', '4a', '4b', '4c', '0a', '|123456789IJKL.|', '$', 'xxd', 'p1.txt', '00000000:', '3132', '3334', '3536', '3738', '3949', '4a4b', '4c0a', '123456789IJKL.', '\\end{lstlisting}', '\\end{enumerate}', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '5:', 'Error', 'Propagation', '--', 'Corrupted', 'Cipher', 'Text}', 'To', 'understand', 'the', 'error', 'propagation', 'property', 'of', 'various', 'encryption', 'modes,', 'we', 'would', 'like', 'to', 'do', 'the', 'following', 'exercise:', '\\begin{enumerate}', '\\item', 'Create', 'a', 'text', 'file', 'that', 'is', 'at', 'least', '1000', 'bytes', 'long.', '\\item', 'Encrypt', 'the', 'file', 'using', 'the', 'AES-128', 'cipher.', '\\item', 'Unfortunately,', 'a', 'single', 'bit', 'of', 'the', '55th', 'byte', 'in', 'the', 'encrypted', 'file', 'got', 'corrupted.', 'You', 'can', 'achieve', 'this', 'corruption', 'using', 'the', '\\texttt{bless}', 'hex', 'editor.', '\\item', 'Decrypt', 'the', 'corrupted', 'ciphertext', 'file', 'using', 'the', 'correct', 'key', 'and', 'IV.', '\\end{enumerate}', 'Please', 'answer', 'the', 'following', 'question:', 'How', 'much', 'information', 'can', 'you', 'recover', 'by', 'decrypting', 'the', 'corrupted', 'file,', 'if', 'the', 'encryption', 'mode', 'is', 'ECB,', 'CBC,', 'CFB,', 'or', 'OFB,', 'respectively?', 'Please', 'answer', 'this', 'question', 'before', 'you', 'conduct', 'this', 'task,', 'and', 'then', 'find', 'out', 'whether', 'your', 'answer', 'is', 'correct', 'or', 'wrong', 'after', 'you', 'finish', 'this', 'task.', 'Please', 'provide', 'justification.', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '6:', 'Initial', 'Vector', '(IV)', 'and', 'Common', 'Mistakes}', 'Most', 'of', 'the', 'encryption', 'modes', 'require', 'an', 'initial', 'vector', '(IV).', 'Properties', 'of', 'an', 'IV', 'depend', 'on', 'the', 'cryptographic', 'scheme', 'used.', 'If', 'we', 'are', 'not', 'careful', 'in', 'selecting', 'IVs,', 'the', 'data', 'encrypted', 'by', 'us', 'may', 'not', 'be', 'secure', 'at', 'all,', 'even', 'though', 'we', 'are', 'using', 'a', 'secure', 'encryption', 'algorithm', 'and', 'mode.', 'The', 'objective', 'of', 'this', 'task', 'is', 'to', 'help', 'students', 'understand', 'the', 'problems', 'if', 'an', 'IV', 'is', 'not', 'selected', 'properly.', 'The', 'detailed', 'guidelines', 'for', 'this', 'task', 'is', 'provided', 'in', 'Chapter', '21.5', 'of', 'the', 'SEED', 'book.', '%', '-------------------------------------------', '%', 'SUBSECTION', '%', '-------------------------------------------', '\\subsection{Task', '6.1.', 'IV', 'Experiment}', 'A', 'basic', 'requirement', 'for', 'IV', 'is', '\\textit{uniqueness},', 'which', 'means', 'that', 'no', 'IV', 'may', 'be', 'reused', 'under', 'the', 'same', 'key.', 'To', 'understand', 'why,', 'please', 'encrypt', 'the', 'same', 'plaintext', 'using', '(1)', 'two', 'different', 'IVs,', 'and', '(2)', 'the', 'same', 'IV.', 'Please', 'describe', 'your', 'observation,', 'based', 'on', 'which,', 'explain', 'why', 'IV', 'needs', 'to', 'be', 'unique.', '%', '-------------------------------------------', '%', 'SUBSECTION', '%', '-------------------------------------------', '\\subsection{Task', '6.2.', 'Common', 'Mistake:', 'Use', 'the', 'Same', 'IV}', 'One', 'may', 'argue', 'that', 'if', 'the', 'plaintext', 'does', 'not', 'repeat,', 'using', 'the', 'same', 'IV', 'is', 'safe.', 'Let', 'us', 'look', 'at', 'the', 'Output', 'Feedback', '(OFB)', 'mode.', 'Assume', 'that', 'the', 'attacker', 'gets', 'hold', 'of', 'a', 'plaintext', '(\\texttt{P1})', 'and', 'a', 'ciphertext', '(\\texttt{C1})', ',', 'can', 'he/she', 'decrypt', 'other', 'encrypted', 'messages', 'if', 'the', 'IV', 'is', 'always', 'the', 'same?', 'You', 'are', 'given', 'the', 'following', 'information,', 'please', 'try', 'to', 'figure', 'out', 'the', 'actual', 'content', 'of', '\\texttt{P2}', 'based', 'on', '\\texttt{C2},', '\\texttt{P1},', 'and', '\\texttt{C1}.', '\\begin{lstlisting}', 'Plaintext', '(P1):', 'This', 'is', 'a', 'known', 'message!', 'Ciphertext', '(C1):', 'a469b1c502c1cab966965e50425438e1bb1b5f9037a4c159', 'Plaintext', '(P2):', '(unknown', 'to', 'you)', 'Ciphertext', '(C2):', 'bf73bcd3509299d566c35b5d450337e1bb175f903fafc159', '\\end{lstlisting}', 'If', 'we', 'replace', 'OFB', 'in', 'this', 'experiment', 'with', 'CFB', '(Cipher', 'Feedback),', 'how', 'much', 'of', '\\texttt{P2}', 'can', 'be', 'revealed?', 'You', 'only', 'need', 'to', 'answer', 'the', 'question;', 'there', 'is', 'no', 'need', 'to', 'demonstrate', 'that.', 'The', 'attack', 'used', 'in', 'this', 'experiment', 'is', 'called', 'the', '\\textit{known-plaintext', 'attack},', 'which', 'is', 'an', 'attack', 'model', 'for', 'cryptanalysis', 'where', 'the', 'attacker', 'has', 'access', 'to', 'both', 'the', 'plaintext', 'and', 'its', 'encrypted', 'version', '(ciphertext).', 'If', 'this', 'can', 'lead', 'to', 'the', 'revealing', 'of', 'further', 'secret', 'information,', 'the', 'encryption', 'scheme', 'is', 'not', 'considered', 'as', 'secure.', '\\paragraph{Sample', 'Code.}', 'We', 'provide', 'a', 'sample', 'program', 'called', '\\texttt{sample\\_code.py},', 'which', 'can', 'be', 'found', 'inside', 'the', '\\path{Labsetup/Files}', 'folder.', 'It', 'shows', 'you', 'how', 'to', 'XOR', 'strings', '(ascii', 'strings', 'and', 'hex', 'strings).', 'The', 'code', 'is', 'shown', 'in', 'the', 'following:', '\\begin{lstlisting}', '#!/usr/bin/python3', '#', 'XOR', 'two', 'bytearrays', 'def', 'xor(first,', 'second):', 'return', 'bytearray(x^y', 'for', 'x,y', 'in', 'zip(first,', 'second))', 'MSG', '=', '"A', 'message"', 'HEX_1', '=', '"aabbccddeeff1122334455"', 'HEX_2', '=', '"1122334455778800aabbdd"', '#', 'Convert', 'ascii/hex', 'string', 'to', 'bytearray', 'D1', '=', 'bytes(MSG,', "'utf-8')", 'D2', '=', 'bytearray.fromhex(HEX_1)', 'D3', '=', 'bytearray.fromhex(HEX_2)', 'r1', '=', 'xor(D1,', 'D2)', 'r2', '=', 'xor(D2,', 'D3)', 'r3', '=', 'xor(D2,', 'D2)', 'print(r1.hex())', 'print(r2.hex())', 'print(r3.hex())', '\\end{lstlisting}', '%', '-------------------------------------------', '%', 'SUBSECTION', '%', '-------------------------------------------', '\\subsection{Task', '6.3.', 'Common', 'Mistake:', 'Use', 'a', 'Predictable', 'IV}', 'From', 'the', 'previous', 'tasks,', 'we', 'now', 'know', 'that', 'IVs', 'cannot', 'repeat.', 'Another', 'important', 'requirement', 'on', 'IV', 'is', 'that', 'IVs', 'need', 'to', 'be', 'unpredictable', 'for', 'many', 'schemes,', 'i.e.,', 'IVs', 'need', 'to', 'be', 'randomly', 'generated.', 'In', 'this', 'task,', 'we', 'will', 'see', 'what', 'is', 'going', 'to', 'happen', 'if', 'IVs', 'are', 'predictable.', 'Assume', 'that', 'Bob', 'just', 'sent', 'out', 'an', 'encrypted', 'message,', 'and', 'Eve', 'knows', 'that', 'its', 'content', 'is', 'either', '\\texttt{Yes}', 'or', '\\texttt{No};', 'Eve', 'can', 'see', 'the', 'ciphertext', 'and', 'the', 'IV', 'used', 'to', 'encrypt', 'the', 'message,', 'but', 'since', 'the', 'encryption', 'algorithm', 'AES', 'is', 'quite', 'strong,', 'Eve', 'has', 'no', 'idea', 'what', 'the', 'actual', 'content', 'is.', 'However,', 'since', 'Bob', 'uses', 'predictable', 'IVs,', 'Eve', 'knows', 'exactly', 'what', 'IV', 'Bob', 'is', 'going', 'to', 'use', 'next.', '%', 'The', 'following', 'summarizes', 'what', 'Bob', 'and', 'Eve', 'know:', '%', '\\begin{lstlisting}', '%', 'Encryption', 'method:', '128-bit', 'AES', 'with', 'CBC', 'mode.', '%', 'Key', '(in', 'hex):', '00112233445566778899aabbccddeeff', '(known', 'only', 'to', 'Bob)', '%', 'Ciphertext', '(C1):', 'bef65565572ccee2a9f9553154ed9498', '(known', 'to', 'both)', '%', 'IV', 'used', 'on', 'P1', '(known', 'to', 'both)', '%', '(in', 'ascii):', '1234567890123456', '%', '(in', 'hex)', ':', '31323334353637383930313233343536', '%', 'Next', 'IV', '(known', 'to', 'both)', '%', '(in', 'ascii):', '1234567890123457', '%', '(in', 'hex)', ':', '31323334353637383930313233343537', '%', '\\end{lstlisting}', 'A', 'good', 'cipher', 'should', 'not', 'only', 'tolerate', 'the', 'known-plaintext', 'attack', 'described', 'previously,', 'it', 'should', 'also', 'tolerate', 'the', '\\textit{chosen-plaintext', 'attack},', 'which', 'is', 'an', 'attack', 'model', 'for', 'cryptanalysis', 'where', 'the', 'attacker', 'can', 'obtain', 'the', 'ciphertext', 'for', 'an', 'arbitrary', 'plaintext.', 'Since', 'AES', 'is', 'a', 'strong', 'cipher', 'that', 'can', 'tolerate', 'the', 'chosen-plaintext', 'attack,', 'Bob', 'does', 'not', 'mind', 'encrypting', 'any', 'plaintext', 'given', 'by', 'Eve;', 'he', 'does', 'use', 'a', 'different', 'IV', 'for', 'each', 'plaintext,', 'but', 'unfortunately,', 'the', 'IVs', 'he', 'generates', 'are', 'not', 'random,', 'and', 'they', 'can', 'always', 'be', 'predictable.', 'Your', 'job', 'is', 'to', 'construct', 'a', 'message', 'and', 'ask', 'Bob', 'to', 'encrypt', 'it', 'and', 'give', 'you', 'the', 'ciphertext.', 'Your', 'objective', 'is', 'to', 'use', 'this', 'opportunity', 'to', 'figure', 'out', 'whether', 'the', 'actual', 'content', 'of', "Bob's", 'secret', 'message', 'is', '\\texttt{Yes}', 'or', '\\texttt{No}.', 'For', 'this', 'task,', 'your', 'are', 'given', 'an', 'encryption', 'oracle', 'which', 'simulates', 'Bob', 'and', 'encrypts', 'message', 'with', '128-bit', 'AES', 'with', 'CBC', 'mode.', 'You', 'can', 'get', 'access', 'to', 'the', 'oracle', 'by', 'running', 'the', 'following', 'command:', '\\begin{lstlisting}', '$', 'nc', '10.9.0.80', '3000', "Bob's", 'secret', 'message', 'is', 'either', '"Yes"', 'or', '"No",', 'without', 'quotations.', "Bob's", 'ciphertex:', '54601f27c6605da997865f62765117ce', 'The', 'IV', 'used', ':', 'd27d724f59a84d9b61c0f2883efa7bbc', 'Next', 'IV', ':', 'd34c739f59a84d9b61c0f2883efa7bbc', 'Your', 'plaintext', ':', '11223344aabbccdd', 'Your', 'ciphertext:', '05291d3169b2921f08fe34449ddc3611', 'Next', 'IV', ':', 'cd9f1ee659a84d9b61c0f2883efa7bbc', 'Your', 'plaintext', ':', '<your', 'input>', '\\end{lstlisting}', 'After', 'showing', 'you', 'the', 'next', 'IV,', 'the', 'oracle', 'will', 'ask', 'you', 'to', 'input', 'a', 'plaintext', 'message', '(as', 'a', 'hex', 'string).', 'The', 'oracle', 'will', 'encrypt', 'the', 'message', 'with', 'the', 'next', 'IV,', 'and', 'outputs', 'the', 'new', 'ciphertext.', 'You', 'can', 'try', 'different', 'plaintexts,', 'but', 'keep', 'in', 'mind', 'that', 'every', 'time,', 'the', 'IV', 'will', 'change,', 'but', 'it', 'is', 'predictable.', 'To', 'simply', 'your', 'job,', 'we', 'let', 'the', 'oracle', 'print', 'out', 'the', 'next', 'IV.', 'To', 'exit', 'from', 'the', 'interaction,', 'press', '\\text{Ctrl+C}.', '%', '-------------------------------------------', '%', 'SUBSECTION', '%', '-------------------------------------------', '\\subsection{Additional', 'Readings}', 'There', 'are', 'more', 'advanced', 'cryptanalysis', 'on', 'IV', 'that', 'is', 'beyond', 'the', 'scope', 'of', 'this', 'lab.', 'Students', 'can', 'read', 'the', 'article', 'posted', 'in', 'this', 'URL:', '\\url{https://defuse.ca/cbcmodeiv.htm}.', 'Because', 'the', 'requirements', 'on', 'IV', 'really', 'depend', 'on', 'cryptographic', 'schemes,', 'it', 'is', 'hard', 'to', 'remember', 'what', 'properties', 'should', 'be', 'maintained', 'when', 'we', 'select', 'an', 'IV.', 'However,', 'we', 'will', 'be', 'safe', 'if', 'we', 'always', 'use', 'a', 'new', 'IV', 'for', 'each', 'encryption,', 'and', 'the', 'new', 'IV', 'needs', 'to', 'be', 'generated', 'using', 'a', 'good', 'pseudo', 'random', 'number', 'generator,', 'so', 'it', 'is', 'unpredictable', 'by', 'adversaries.', 'See', 'another', 'SEED', 'lab', '(Random', 'Number', 'Generation', 'Lab)', 'for', 'details', 'on', 'how', 'to', 'generate', 'cryptographically', 'strong', 'pseudo', 'random', 'numbers.', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Task', '7:', 'Programming', 'using', 'the', 'Crypto', 'Library}', 'This', 'task', 'is', 'mainly', 'designed', 'for', 'students', 'in', 'Computer', 'Science/Engineering', 'or', 'related', 'fields,', 'where', 'programming', 'is', 'required.', 'Students', 'should', 'check', 'with', 'their', 'professors', 'to', 'see', 'whether', 'this', 'task', 'is', 'required', 'for', 'their', 'courses', 'or', 'not.', 'In', 'this', 'task,', 'you', 'are', 'given', 'a', 'plaintext', 'and', 'a', 'ciphertext,', 'and', 'your', 'job', 'is', 'to', 'find', 'the', 'key', 'that', 'is', 'used', 'for', 'the', 'encryption.', 'You', 'do', 'know', 'the', 'following', 'facts:', '\\begin{itemize}', '\\item', 'The', '{\\tt', 'aes-128-cbc}', 'cipher', 'is', 'used', 'for', 'the', 'encryption.', '\\item', 'The', 'key', 'used', 'to', 'encrypt', 'this', 'plaintext', 'is', 'an', 'English', 'word', 'shorter', 'than', '16', 'characters;', 'the', 'word', 'can', 'be', 'found', 'from', 'a', 'typical', 'English', 'dictionary.', 'Since', 'the', 'word', 'has', 'less', 'than', '16', 'characters', '(i.e.', '128', 'bits),', 'pound', 'signs', '(\\texttt{\\#}:', 'hexadecimal', 'value', 'is', '\\texttt{0x23})', 'are', 'appended', 'to', 'the', 'end', 'of', 'the', 'word', 'to', 'form', 'a', 'key', 'of', '128', 'bits.', '\\end{itemize}', 'Your', 'goal', 'is', 'to', 'write', 'a', 'program', 'to', 'find', 'out', 'the', 'encryption', 'key.', 'You', 'can', 'download', 'a', 'English', 'word', 'list', 'from', 'the', 'Internet.', 'We', 'have', 'also', 'included', 'one', 'in', 'the', '\\texttt{Labsetup.zip}', 'file.', 'The', 'plaintext,', 'ciphertext,', 'and', 'IV', 'are', 'listed', 'in', 'the', 'following:', '\\begin{lstlisting}', 'Plaintext', '(total', '21', 'characters):', 'This', 'is', 'a', 'top', 'secret.', 'Ciphertext', '(in', 'hex', 'format):', '764aa26b55a4da654df6b19e4bce00f4', 'ed05e09346fb0e762583cb7da2ac93a2', 'IV', '(in', 'hex', 'format):', 'aabbccddeeff00998877665544332211', '\\end{lstlisting}', 'You', 'need', 'to', 'pay', 'attention', 'to', 'the', 'following', 'issues:', '\\begin{itemize}', '\\item', 'If', 'you', 'choose', 'to', 'store', 'the', 'plaintext', 'message', 'in', 'a', 'file,', 'and', 'feed', 'the', 'file', 'to', 'your', 'program,', 'you', 'need', 'to', 'check', 'whether', 'the', 'file', 'length', 'is', '21.', 'If', 'you', 'type', 'the', 'message', 'in', 'a', 'text', 'editor,', 'you', 'need', 'to', 'be', 'aware', 'that', 'some', 'editors', 'may', 'add', 'a', 'special', 'character', 'to', 'the', 'end', 'of', 'the', 'file.', 'The', 'easiest', 'way', 'to', 'store', 'the', 'message', 'in', 'a', 'file', 'is', 'to', 'use', 'the', 'following', 'command', '(the', '\\texttt{-n}', 'flag', 'tells', '\\texttt{echo}', 'not', 'to', 'add', 'a', 'trailing', 'newline):', '\\begin{lstlisting}', '$', 'echo', '-n', '"This', 'is', 'a', 'top', 'secret."', '>', 'file', '\\end{lstlisting}', '\\item', 'In', 'this', 'task,', 'you', 'are', 'supposed', 'to', 'write', 'your', 'own', 'program', 'to', 'invoke', 'the', 'crypto', 'library.', 'No', 'credit', 'will', 'be', 'given', 'if', 'you', 'simply', 'use', 'the', '{\\tt', 'openssl}', 'commands', 'to', 'do', 'this', 'task.', 'Sample', 'code', 'can', 'be', 'found', 'from', 'the', 'following', 'URL:', '\\begin{lstlisting}', 'https://www.openssl.org/docs/man1.1.1/man3/EVP_CipherInit.html', '\\end{lstlisting}', '\\item', 'When', 'you', 'compile', 'your', 'code', 'using', '\\texttt{gcc},', 'do', 'not', 'forget', 'to', 'include', 'the', '\\texttt{-lcrypto}', 'flag,', 'because', 'your', 'code', 'needs', 'the', '\\texttt{crypto}', 'library.', 'See', 'the', 'following', 'example:', '\\begin{lstlisting}', '$', 'gcc', '-o', 'myenc', 'myenc.c', '-lcrypto', '\\end{lstlisting}', '\\end{itemize}', '\\paragraph{Note', 'to', 'instructors.}', 'We', 'encourage', 'instructors', 'to', 'generate', 'their', 'own', 'plaintext', 'and', 'ciphertext', 'using', 'a', 'different', 'key;', 'this', 'way', 'students', 'will', 'not', 'be', 'able', 'to', 'get', 'the', 'answer', 'from', 'another', 'place', 'or', 'from', 'previous', 'courses.', 'Instructors', 'can', 'use', 'the', 'following', 'commands', 'to', 'achieve', 'this', 'goal', '(please', 'replace', 'the', 'word', '\\texttt{example}', 'with', 'another', 'secret', 'word,', 'and', 'add', 'the', 'correct', 'number', 'of', '\\#', 'signs', 'to', 'make', 'the', 'length', 'of', 'the', 'string', 'to', 'be', '16):', '\\begin{lstlisting}', '$', 'echo', '-n', '"This', 'is', 'a', 'top', 'secret."', '>', 'plaintext.txt', '$', 'echo', '-n', '"example#########"', '>', 'key', '$', 'xxd', '-p', 'key', '6578616d706c65232323232323232323', '$', 'openssl', 'enc', '-aes-128-cbc', '-e', '-in', 'plaintext.txt', '-out', 'ciphertext.bin', '\\', '-K', '6578616d706c65232323232323232323', '\\', '-iv', '010203040506070809000a0b0c0d0e0f', '\\', '$', 'xxd', '-p', 'ciphertext.bin', 'e5accdb667e8e569b1b34f423508c15422631198454e104ceb658f5918800c22', '\\end{lstlisting}', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Submission}', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '\\input{\\commonfolder/submission}', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '%', '*******************************************', '%', 'SECTION', '%', '*******************************************', '\\section{Acknowledgment}', 'We', 'would', 'like', 'to', 'acknowledge', 'the', 'contribution', 'made', 'by', 'the', 'following', 'people', 'and', 'organizations:', '\\begin{itemize}', '\\item', 'Jiamin', 'Shen', 'developed', 'the', 'following:', 'the', 'code', 'running', 'inside', 'the', 'container,', 'and', 'the', 'container', 'version', 'of', 'the', 'task', 'on', 'predictable', 'IV.', '\\item', 'The', 'US', 'National', 'Science', 'Foundation', 'provided', 'the', 'funding', 'for', 'the', 'SEED', 'project', 'from', '2002', 'to', '2020.', '\\item', 'Syracuse', 'University', 'provided', 'the', 'resources', 'for', 'the', 'SEED', 'project', 'from', '2001', 'onwards.', '\\end{itemize}', '\\end{document}', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%', '%', 'This', 'part', 'is', 'no', 'longer', 'used', '\\subsection{Task', '6:', 'Encrypting', 'UDP', 'Communication}', '\\mynote{', '{\\bf', 'For', 'Instructor:}', 'The', 'goal', 'of', 'Task', '6', 'and', 'Task', '7', 'is', 'to', 'get', 'students', 'to', 'use', 'encryption', 'programmatically.', 'It', 'is', 'not', 'very', 'necessary', 'to', 'do', 'both', 'tasks.', 'Instructors', 'can', 'choose', 'either', 'one', 'of', 'them', '(or', 'both).', 'If', 'the', 'encryption', 'topic', 'is', 'covered', 'in', 'the', 'context', 'of', 'a', 'Network', 'Security', 'class,', 'Task', '6', 'is', 'a', 'better', 'choice,', 'because', 'it', 'uses', 'encryption', 'to', 'secure', 'a', 'communication', 'channel.', '}', '\\noindent', 'So', 'far,', 'we', 'have', 'learned', 'how', 'to', 'use', 'the', 'existing', 'tools', 'provided', 'by', '\\openssl', 'to', 'encrypt', 'and', 'decrypt', 'messages.', 'We', 'would', 'like', 'to', 'build', 'our', 'own', 'tools.', 'Therefore,', 'the', 'objective', 'of', 'this', 'task', 'is', 'to', 'learn', 'how', 'to', 'use', "\\openssl's", 'crypto', 'library', 'to', 'encrypt/decrypt', 'messages', 'in', 'programs.', 'OpenSSL', 'provides', 'an', 'API', 'called', 'EVP,', 'which', 'is', 'a', 'high-level', 'interface', 'to', 'cryptographic', 'functions.', 'Although', 'OpenSSL', 'also', 'has', 'direct', 'interfaces', 'for', 'each', 'individual', 'encryption', 'algorithm,', 'the', 'EVP', 'library', 'provides', 'a', 'common', 'interface', 'for', 'various', 'encryption', 'algorithms.', 'To', 'ask', 'EVP', 'to', 'use', 'a', 'specific', 'algorithm,', 'we', 'simply', 'need', 'to', 'pass', 'our', 'choice', 'to', 'the', 'EVP', 'interface.', 'A', 'sample', 'code', 'is', 'given', 'in', '\\url{https://www.openssl.org/docs/man1.1.1/man3/EVP_CipherInit.html}', 'Please', 'get', 'familiar', 'with', 'this', 'program.', 'In', 'this', 'task,', 'we', 'will', 'build', 'a', 'client/server', 'program,', 'which', 'use', 'the', 'UDP', 'protocol', 'and', 'the', 'communication', 'is', 'encrypted.', 'The', 'client', 'and', 'server', 'side', 'of', 'the', 'program', 'should', 'satisfy', 'the', 'following', 'requirements:', '\\begin{itemize}', '\\item', 'The', 'data', 'sent', 'between', 'the', 'client', 'and', 'server', 'should', 'be', 'encrypted', 'using', 'an', 'encryption', 'algorithm', 'and', 'mode', 'of', 'your', 'choice', '(e.g.', '\\texttt{aes-128-cbc}).', '\\item', 'The', 'client', 'program', 'runs', 'in', 'a', 'loop,', 'and', 'keeps', 'asking', 'the', 'user', 'to', 'type', 'a', 'message.', 'Once', 'the', 'user', 'hits', 'the', 'return,', 'the', 'message', 'will', 'be', 'sent', 'to', 'the', 'server', 'using', 'UDP.', 'Upon', 'receiving', 'the', 'UDP', 'packet,', 'the', 'server', 'simply', 'prints', 'out', 'the', 'decrypted', 'message.', '\\item', 'The', 'client', 'and', 'server', 'need', 'a', 'common', 'secret', 'key', 'to', 'encrypt', 'the', 'communication.', 'Obviously,', 'they', 'cannot', 'send', 'the', 'key', 'to', 'each', 'other', 'in', 'plaintext.', 'In', 'practice,', 'they', 'need', 'to', 'run', 'a', 'key-exchange', 'protocol', 'to', 'get', 'the', 'key.', 'We', 'will', 'cover', 'that', 'protocol', 'after', 'we', 'have', 'learned', 'the', 'public', 'key', 'encryption.', 'In', 'this', 'task,', 'we', 'assume', 'that', 'the', 'client', 'and', 'server', 'has', 'already', 'obtained', 'a', 'secret', 'key', 'between', 'them,', 'so', 'we', 'will', 'just', 'type', 'in', 'the', 'key', 'as', 'an', 'argument', 'when', 'we', 'run', 'the', 'client', 'and', 'server', 'programs.', '{\\bf', 'Note:}', 'you', 'cannot', 'hardcode', 'the', 'key', 'in', 'your', 'program,', 'because', 'it', 'is', 'a', 'very', 'bad', 'habit.', '\\item', 'The', 'Initial', 'Vector', '(IV)', 'needs', 'to', 'be', 'randomly', 'generated', 'by', 'the', 'client,', 'and', 'should', 'be', 'sent', 'to', 'the', 'server', 'in', 'plaintext.', 'You', 'can', 'put', 'the', 'IV', 'at', 'the', 'beginning', 'of', 'the', 'UDP', 'data.', 'In', 'your', 'report,', 'please', 'answer', 'why', 'the', 'client', 'cannot', 'reuse', 'the', 'IV', 'throughout', 'its', 'execution', '(hint:', 'try', 'to', 'fix', 'your', 'IV', 'in', 'your', 'client', 'program,', 'then', 'type', 'the', 'same', 'message,', 'and', 'use', 'Wireshark', 'to', 'see', 'what', 'you', 'can', 'infer', 'about', 'the', 'encrypted', 'data).', '\\end{itemize}'], 'path': 'file/list.txt', 'out1': <Thread(Thread-4, initial)>, 'out2': None, 'pathlib': array('file/list.txt', dtype='<U13'), 'out3': None, 'output': {...}, 'adaja': 'HTTP/1.1', 'file_rotation_number': <module 'socketserver' from '/data/data/com.termux/files/usr/lib/python3.11/socketserver.py'>, 'posixpath': array([381, 192, 398, 205, 441, 125, 106, 194, 111, 162, 241, 329, 187,
       273,   3, 328, 145, 257, 318, 389,  26, 339, 137, 324, 392, 263,
       211,  18, 116, 114, 415, 423, 399, 302, 179, 234,  83, 311, 105,
        47,   6,  15, 346, 397,  23, 429,  48, 357, 360,  73, 286, 291,
        25, 334, 310, 386, 174,  79, 231, 191, 198, 208, 124, 433, 284,
       437, 146, 331,   5, 348, 410, 250,  53, 395,  87, 321, 400, 203,
       406, 363]), 'threadings': ['http://1.1.1.1'], 'ipppo': 'http://1.1.1.1', 'ps': ['', ''], 'sport': '', 'ipp': ['', ''], 'login': <function login at 0x78d46659e0>, 'browser': <function browser at 0x78d454d4e0>, 'otp': ['http://1.1.1.1'], 'getclient': <function getclient at 0x78d454d440>, 'getkuy': <function getclient at 0x78d454d440>, 'code': '', 'refPts': <module 'django.contrib.sites.requests' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/django/contrib/sites/requests.py'>, 'abs': <socket.socket [closed] fd=-1, family=2, type=1, proto=0>, 'testi': ['', ''], 'masuk2': 'http://1.1.1.1', 'test_tls': nan, 'workdir': <Response [200]>, 'initer': '', 'inimo': ['HTTP/1.1'], 'ssl': ['NOT', 'FOUND'], 'test_tls_options': {}, 'webbrowser': False, 'inited': '', 'write': None, 'decoded': <module 'decorator' from '/data/data/com.termux/files/usr/lib/python3.11/site-packages/decorator.py'>, 'payload': (<built-in function open>, {'/', '.', 'h', ':', 't', '1', 'p'}), 'struct': None, 'hash': -5538129966507392773, 'baru': 'http://1.1.1.1', 'opcode': 'http://1.1.1.1', 'prog': {...}}